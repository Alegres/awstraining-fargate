name: multibranch pipeline
run-name: Multibranch ${{ github.head_ref || github.ref_name }}

on:
  push:
    branches:
      - master
      - release/*
      - feature/*
      - bugfix/*
  workflow_dispatch:
    inputs:
      skipSmokeTests:
        description: Should skip smoke tests?
        type: boolean
        required: false
        default: false
      skipIntegrationTests:
        description: Should skip integration tests?
        type: boolean
        required: false
        default: false

jobs:
  properties:
    uses: ./.github/workflows/datacenterMap.yml
    with:
      hubEnv: BACKEND_EMEA_TEST
    secrets: inherit

  buildTestDeploy:
    runs-on: ubuntu-latest
    needs: properties
    env:
      AWS_ACCOUNT: ${{ needs.properties.outputs.AWS_ACCOUNT }}
      AWS_KEY:  ${{ secrets.BACKEND_EMEA_TEST_AWS_KEY }}
      AWS_SECRET: ${{ secrets.BACKEND_EMEA_TEST_AWS_SECRET }}
      REGION: ${{ needs.properties.outputs.REGION }}
      CLUSTER_NAME: ${{ needs.properties.outputs.CLUSTER_NAME }}
      SERVICE_NAME: ${{ needs.properties.outputs.SERVICE_NAME }}
      SKIP_SMOKE_TESTS: ${{ (github.event.inputs.skipSmokeTests != null && github.event.inputs.skipSmokeTests == 'true') || 'false' }}
      SKIP_INTEGRATION_TESTS: ${{ (github.event.inputs.skipIntegrationTests != null && github.event.inputs.skipIntegrationTests == 'true') || 'false' }}
      SMOKETEST_BACKEND_PASSWORD: ${{ secrets.BACKEND_EMEA_TEST_SMOKETEST_BACKEND_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: JDK 17 setup
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Maven setup
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.2

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Extract branch name from GITHUB_REF environment variable, which be default is in the format "refs/heads/<branch-name>"
      # e.g. extracts refs/heads/<branch-name> -> <branch-name>
      - name: Extract branch name
        if: ${{ env.SKIP_SONAR == 'false' && !github.base_ref }}
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
        
      - name: Display built branch in summary
        if: always()
        run: |
          echo "### Built branch ${{ steps.extract_branch.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
      - name: Build
        run: mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package org.jacoco:jacoco-maven-plugin:report

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d %T')"

      - name: JUnits report
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: JUnits report ${{ steps.date.outputs.date }}
          files: |
            **/surefire-reports/TEST-*.xml

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Branch name
        run: echo running on branch ${GITHUB_REF##*/}

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend
        run: |
          docker build -t backend .
          docker tag backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}
          docker tag backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # deploy:
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: assembly-fargate/src/main/resources/fargate/BACKEND_EMEA_TEST/task.json
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true

      # performTests:
      - name: Clean up test report
        if: always()
        run: |
          mvn clean

      - name: Run smoke tests
        if: ${{ env.SKIP_SMOKE_TESTS == 'false' }}
        run: |
          mvn -f pom.xml clean test -P st,BACKEND_EMEA_TEST

      - name: Smoke tests report
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Smoke tests report ${{ steps.date.outputs.date }}
          files: |
            **/surefire-reports/TEST-*.xml

      - name: Clean up test report
        if: always()
        run: |
          mvn clean

  pipelinePassed:
    runs-on: ubuntu-latest
    needs: buildTestDeploy
    steps:
      - name: All passed
        run: |
          echo "All steps have passed."
